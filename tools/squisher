#!/bin/bash
#
# Squish a CM otapackage for distribution
# cyanogen
#

. $ANDROID_BUILD_TOP/vendor/cm/tools/functions

OUT_TARGET_HOST=`uname -a | grep Darwin`
if [ -z "$OUT_TARGET_HOST" ]
then
   OUT_TARGET_HOST=linux-x86
   MD5=md5sum
   XARGS="xargs --max-args=1 --max-procs `grep 'processor' /proc/cpuinfo|wc -l`"
   SED=sed
else
   OUT_TARGET_HOST=darwin-x86
   MD5=md5
   XARGS="xargs -n 1 -P `sysctl hw.ncpu | awk '{print $2}'`"
   SED=gsed
fi

if [ -z "$OUT" -o ! -d "$OUT" ]; then
	echo -e $CL_RED"ERROR: $0 only works with a full build environment. $OUT should exist."$CL_RST
	exit 1
fi

if [ -z "$TARGETFILES" -o ! -d "$TARGETFILES" ]; then
	echo -e $CL_RED"$TARGETFILES doesn't exist!"$CL_RST;
	exit 1
fi

OPTICHARGER=$ANDROID_BUILD_TOP/vendor/cm/tools/opticharger
QUIET=-q
DELETE_BINS="applypatch applypatch_static check_prereq recovery updater"

REPACK=$OUT/repack.d
printf "Sanitizing environment..."
rm -rf $REPACK
mkdir -p $REPACK
echo

(
# Move all apks to the same directory so xargs can
# use also with framework-res.apk. This allow process
# framework-res.apk in parallel with other apks
cp $TARGETFILES/SYSTEM/framework/framework-res.apk $REPACK
cp $TARGETFILES/SYSTEM/app/*.apk $REPACK

# Do optimization in parallel
find $REPACK/ -name \*.apk | $XARGS $OPTICHARGER

# Move optimized apks to repack directory
mv -f $REPACK/framework-res.apk $TARGETFILES/SYSTEM/framework/framework-res.apk
mv -f $REPACK/*.apk $TARGETFILES/SYSTEM/app/
)

# Fix build.prop
$SED -i \
	-e '/ro\.kernel\.android\.checkjni/d' \
	-e '/ro\.build\.type/s/eng/user/' \
	$TARGETFILES/SYSTEM/build.prop

# Delete unnecessary binaries
( cd $TARGETFILES/SYSTEM/bin; echo $DELETE_BINS | xargs rm -f; )

# Strip modules
[ -d $TARGETFILES/SYSTEM/lib/modules ] && \
	find $TARGETFILES/SYSTEM/lib/modules -name "*.ko" -print0 | xargs -0 arm-eabi-strip --strip-unneeded

exit 0
